%YAML 1.2
---
name: StoryScript
file_extensions:
  - bks
scope: source.ssc

contexts:
  main:
    - include: commands

  commands:
    - match: ^(【)([\s\S]*)(】)$
      captures:
        1: punctuation.definition.tag.begin.ssc
        2: markup.bold.ssc
        3: punctuation.definition.tag.end.ssc
    - match: ^#(?:if|elseif|while|foreach|let)
      scope: keyword.control.ssc
      push: expression
    - match: ^#(?:else|end)
      scope: keyword.control.ssc
    - match: (?<!\\)(\[)(\w+)\b
      captures:
        1: punctuation.definition.tag.begin.ssc
        2: entity.name.tag.ssc
      push: tags

  tags:
    - match: \b[^=\s"'\[\]]+\b
      scope: entity.other.attribute-name.ssc
    - match: =\s*
      scope: punctuation.separator.key-value.ssc
      push: value
    - match: \]
      scope: punctuation.definition.tag.end.ssc
      pop: true

  value:
    - match: '"'
      scope: punctuation.definition.string.begin.ssc
      push: double-string
    - match: "'"
      scope: punctuation.definition.string.begin.ssc
      push: single-string
    - include: numbers
    - include: boolean
    - match: \[
      scope: punctuation.definition.array.begin.ssc
      push: array
    - match: ''
      pop: true

  array:
    - match: \]
      scope: punctuation.definition.end.begin.ssc
      pop: true
    - match: ','
      scope: punctuation.separator.ssc
      push: value
    - match: ''
      push: value

  double-string:
    - meta_scope: string.quoted.double.ssc
    - match: \\[\\"'a-z0-9]
      scope: constant.character.escape.ssc
    - match: '"'
      scope: punctuation.definition.string.end.ssc
      pop: true

  single-string:
    - meta_scope: string.quoted.single.ssc
    - match: \\[\\"'a-z0-9]
      scope: constant.character.escape.ssc
    - match: "'"
      scope: punctuation.definition.string.end.ssc
      pop: true

  expression:
    - include: numbers
    - include: boolean
    - include: comments
    - match: (?:in)
      scope: keyword.control.ssc
    - match: (?:[%\$]?\w+)
      scope: variable.other.ssc
    - match: (?:[\+\-\*/%<>=&\|])
      scope: keyword.operator.ssc
    - match: (?<==)\s*(")
      captures:
        1: punctuation.definition.string.begin.ssc
      push: double-string
    - match: (?<==)\s*(')
      captures:
        1: punctuation.definition.string.begin.ssc
      push: single-string
    - match: \n
      pop: true

  numbers:
    - match: (?x)(?:(?:(?:\b\d(?:[\d']*\d)?\.\d(?:[\d']*\d)?|\B\.\d(?:[\d']*\d)?)(?:[Ee][+-]?\d(?:[\d']*\d)?)?(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))?\b|(?:\b\d(?:[\d']*\d)?\.)(?:\B|(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))\b|(?:[Ee][+-]?\d(?:[\d']*\d)?)(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))?\b)|\b\d(?:[\d']*\d)?(?:[Ee][+-]?\d(?:[\d']*\d)?)(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))?\b)|\b(?:(?:[1-9](?:[\d']*\d)?|0(?:[0-7']*[0-7])?|0[Xx][\da-fA-F](?:[\da-fA-F']*[\da-fA-F])?|0[Bb][01](?:[01']*[01])?)(?:(?:l{1,2}|L{1,2})[uU]?|[uU](?:l{0,2}|L{0,2})|(?:i[fl]?|h|min|[mun]?s|_\w*))?)\b)(?!\.)
      scope: constant.numeric.ssc

  boolean:
    - match: (true|false)
      scope: variable.language.ssc

  comments:
    - match: //[^\n]*(?=\n|$)
      scope: comment.line.ssc
